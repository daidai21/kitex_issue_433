// Code generated by Kitex v1.9.1. DO NOT EDIT.

package bizservice

import (
	"code.byted.org/kite/kitex/client"
	kitex "code.byted.org/kite/kitex/pkg/serviceinfo"
	"context"
	"github.com/daidai21/kitex_issue_433/kitex_gen/http"
)

func serviceInfo() *kitex.ServiceInfo {
	return bizServiceServiceInfo
}

var bizServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "BizService"
	handlerType := (*http.BizService)(nil)
	methods := map[string]kitex.MethodInfo{
		"BizMethod1": kitex.NewMethodInfo(bizMethod1Handler, newBizServiceBizMethod1Args, newBizServiceBizMethod1Result, false),
	}
	extra := map[string]interface{}{
		"PackageName": "http",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v1.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func bizMethod1Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*http.BizServiceBizMethod1Args)
	realResult := result.(*http.BizServiceBizMethod1Result)
	success, err := handler.(http.BizService).BizMethod1(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBizServiceBizMethod1Args() interface{} {
	return http.NewBizServiceBizMethod1Args()
}

func newBizServiceBizMethod1Result() interface{} {
	return http.NewBizServiceBizMethod1Result()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BizMethod1(ctx context.Context, req *http.BizRequest) (r *http.BizResponse, err error) {
	var _args http.BizServiceBizMethod1Args
	_args.Req = req
	var _result http.BizServiceBizMethod1Result
	if err = p.c.Call(ctx, "BizMethod1", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
